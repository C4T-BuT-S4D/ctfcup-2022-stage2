// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tenders/tenders_service.proto

package tenders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TendersServiceClient is the client API for TendersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TendersServiceClient interface {
	Create(ctx context.Context, in *Tender_CreateRequest, opts ...grpc.CallOption) (*Tender_CreateResponse, error)
	Get(ctx context.Context, in *Tender_GetRequest, opts ...grpc.CallOption) (*Tender_GetResponse, error)
	Close(ctx context.Context, in *Tender_CloseRequest, opts ...grpc.CallOption) (*Tender_CloseResponse, error)
}

type tendersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTendersServiceClient(cc grpc.ClientConnInterface) TendersServiceClient {
	return &tendersServiceClient{cc}
}

func (c *tendersServiceClient) Create(ctx context.Context, in *Tender_CreateRequest, opts ...grpc.CallOption) (*Tender_CreateResponse, error) {
	out := new(Tender_CreateResponse)
	err := c.cc.Invoke(ctx, "/tenders.TendersService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tendersServiceClient) Get(ctx context.Context, in *Tender_GetRequest, opts ...grpc.CallOption) (*Tender_GetResponse, error) {
	out := new(Tender_GetResponse)
	err := c.cc.Invoke(ctx, "/tenders.TendersService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tendersServiceClient) Close(ctx context.Context, in *Tender_CloseRequest, opts ...grpc.CallOption) (*Tender_CloseResponse, error) {
	out := new(Tender_CloseResponse)
	err := c.cc.Invoke(ctx, "/tenders.TendersService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TendersServiceServer is the server API for TendersService service.
// All implementations must embed UnimplementedTendersServiceServer
// for forward compatibility
type TendersServiceServer interface {
	Create(context.Context, *Tender_CreateRequest) (*Tender_CreateResponse, error)
	Get(context.Context, *Tender_GetRequest) (*Tender_GetResponse, error)
	Close(context.Context, *Tender_CloseRequest) (*Tender_CloseResponse, error)
	mustEmbedUnimplementedTendersServiceServer()
}

// UnimplementedTendersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTendersServiceServer struct {
}

func (UnimplementedTendersServiceServer) Create(context.Context, *Tender_CreateRequest) (*Tender_CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTendersServiceServer) Get(context.Context, *Tender_GetRequest) (*Tender_GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTendersServiceServer) Close(context.Context, *Tender_CloseRequest) (*Tender_CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedTendersServiceServer) mustEmbedUnimplementedTendersServiceServer() {}

// UnsafeTendersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TendersServiceServer will
// result in compilation errors.
type UnsafeTendersServiceServer interface {
	mustEmbedUnimplementedTendersServiceServer()
}

func RegisterTendersServiceServer(s grpc.ServiceRegistrar, srv TendersServiceServer) {
	s.RegisterService(&TendersService_ServiceDesc, srv)
}

func _TendersService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tender_CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TendersServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenders.TendersService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TendersServiceServer).Create(ctx, req.(*Tender_CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TendersService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tender_GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TendersServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenders.TendersService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TendersServiceServer).Get(ctx, req.(*Tender_GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TendersService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tender_CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TendersServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenders.TendersService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TendersServiceServer).Close(ctx, req.(*Tender_CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TendersService_ServiceDesc is the grpc.ServiceDesc for TendersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TendersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tenders.TendersService",
	HandlerType: (*TendersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TendersService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TendersService_Get_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _TendersService_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenders/tenders_service.proto",
}

// BidServiceClient is the client API for BidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidServiceClient interface {
	Create(ctx context.Context, in *Bid_CreateRequest, opts ...grpc.CallOption) (*Bid_CreateResponse, error)
	Execute(ctx context.Context, in *Bid_ExecuteRequest, opts ...grpc.CallOption) (*Bid_ExecuteResponse, error)
}

type bidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBidServiceClient(cc grpc.ClientConnInterface) BidServiceClient {
	return &bidServiceClient{cc}
}

func (c *bidServiceClient) Create(ctx context.Context, in *Bid_CreateRequest, opts ...grpc.CallOption) (*Bid_CreateResponse, error) {
	out := new(Bid_CreateResponse)
	err := c.cc.Invoke(ctx, "/tenders.BidService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) Execute(ctx context.Context, in *Bid_ExecuteRequest, opts ...grpc.CallOption) (*Bid_ExecuteResponse, error) {
	out := new(Bid_ExecuteResponse)
	err := c.cc.Invoke(ctx, "/tenders.BidService/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BidServiceServer is the server API for BidService service.
// All implementations must embed UnimplementedBidServiceServer
// for forward compatibility
type BidServiceServer interface {
	Create(context.Context, *Bid_CreateRequest) (*Bid_CreateResponse, error)
	Execute(context.Context, *Bid_ExecuteRequest) (*Bid_ExecuteResponse, error)
	mustEmbedUnimplementedBidServiceServer()
}

// UnimplementedBidServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBidServiceServer struct {
}

func (UnimplementedBidServiceServer) Create(context.Context, *Bid_CreateRequest) (*Bid_CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBidServiceServer) Execute(context.Context, *Bid_ExecuteRequest) (*Bid_ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedBidServiceServer) mustEmbedUnimplementedBidServiceServer() {}

// UnsafeBidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidServiceServer will
// result in compilation errors.
type UnsafeBidServiceServer interface {
	mustEmbedUnimplementedBidServiceServer()
}

func RegisterBidServiceServer(s grpc.ServiceRegistrar, srv BidServiceServer) {
	s.RegisterService(&BidService_ServiceDesc, srv)
}

func _BidService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid_CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenders.BidService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).Create(ctx, req.(*Bid_CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid_ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenders.BidService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).Execute(ctx, req.(*Bid_ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BidService_ServiceDesc is the grpc.ServiceDesc for BidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tenders.BidService",
	HandlerType: (*BidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BidService_Create_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _BidService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenders/tenders_service.proto",
}
